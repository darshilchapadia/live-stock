{"version":3,"sources":["logo.svg","Comp.js","CompWrapper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Comp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","price","lastUpdate","moment","valueOf","stat","nextProps","oldPrice","updateObj","setState","_this$state","react_default","a","createElement","className","from","Component","CompWrapper","data","Fragment","map","itm","src_Comp","key","App","convertArrayToObject","arr","obj","forEach","item","convertObjectToArray","_","each","val","push","parseFloat","toFixed","processData","newData","latestData","oldObj","newObj","finalData","assign","connectSocket","connection","WebSocket","onmessage","evt","JSON","parse","number","src_CompWrapper","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a1e4167.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './App.css';\nimport moment from \"moment\";\n\nclass Comp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: props.name,\n      price: props.price,\n      lastUpdate: moment().valueOf(),\n      stat: \"new\"\n    };\n  }\n  componentWillReceiveProps(nextProps) {\n    let stat;\n    const {price} = nextProps;\n    const oldPrice = this.props.price;\n\n    if(price > oldPrice){\n      stat = \"up\";\n    }\n    else if(price < oldPrice){\n      stat = \"down\";\n    }\n\n    let updateObj = {\n      price,\n      lastUpdate: moment().valueOf()\n    }\n\n    if(stat){\n      updateObj['stat'] = stat\n    }\n    this.setState(updateObj)\n  }\n  render() {\n    const {name, price, stat, lastUpdate} = this.state;\n    return (\n      <div className=\"stock-item\">\n        <p className=\"stock-name\">\n          {name}\n        </p>\n        <p className={\"stock-price \" + stat}>\n          {price}\n        </p>\n        <p className=\"stock-last-update\">{moment().from(lastUpdate)}</p>\n      </div>\n    );\n  }\n}\n\nexport default Comp;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Comp from './Comp';\n\nclass CompWrapper extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: props.data\n        };\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setState({ data: nextProps.data })\n    }\n    render() {\n        const { data } = this.state;\n        return <React.Fragment>\n            {data.map((itm) => {\n                return <Comp key={itm[0]} name={itm[0]} price={itm[1]} />\n            })}\n        </React.Fragment>\n    }\n}\n\nexport default CompWrapper;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CompWrapper from './CompWrapper';\nimport _ from 'underscore';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      number: 0,\n      latestData: []\n    };\n    this.data = [\n      [[\"APPL\", 10], [\"MICR\", 20], [\"REWS\", 31], [\"QWRV\", 89], [\"GSDB\", 21]],\n      [[\"APPL\", 12], [\"REWS\", 645], [\"QWRV\", 6], [\"GSDB\", 43]],\n      [[\"APPL\", 30], [\"MICR\", 30], [\"REWS\", 21], [\"QWRV\", 89], [\"GSDB\", 654]],\n      [[\"APPL\", 20], [\"MICR\", 20], , [\"QWRV\", 4], [\"GSDB\", 21], [\"QWRV\", 40]],\n      [[\"APPL\", 31], [\"MICR\", 20], [\"REWS\", 5], [\"QWRV\", 2], [\"GSDB\", 4]],\n      [[\"APPL\", 10], [\"MICR\", 20], [\"REWS\", 31], , [\"GSDB\", 21]],\n      [[\"APPL\", 54], [\"MICR\", 40], [\"REWS\", 321], [\"REWS\", 31], [\"QWRV\", 1], [\"GSDB\", 55]],\n      [[\"APPL\", 12], [\"MICR\", 50], [\"REWS\", 645], [\"QWRV\", 6], [\"GSDB\", 43]],\n      [[\"MICR\", 30], [\"REWS\", 21], [\"QWRV\", 89], [\"GSDB\", 654], [\"GSDB\", 65]],\n      [[\"APPL\", 31], [\"MICR\", 20], [\"REWS\", 5], [\"QWRV\", 2], [\"GSDB\", 4]],\n      [[\"APPL\", 54], [\"MICR\", 40], [\"REWS\", 321], [\"QWRV\", 1], [\"GSDB\", 55]],\n    ];\n    this.connectSocket()\n  }\n\n  convertArrayToObject = (arr) => {\n    let obj = {};\n    arr.forEach((item) => {\n      obj[item[0]] = item[1]\n    });\n    return obj\n  }\n\n  convertObjectToArray = (obj) => {\n    let arr = [];\n    _.each(obj, (val, key) => {\n      arr.push([key, parseFloat(parseFloat(val).toFixed(2))])\n    });\n    return arr;\n  }\n\n  processData = (newData) => {\n    let { latestData } = this.state;\n    let oldObj = this.convertArrayToObject(latestData);\n    let newObj = this.convertArrayToObject(newData);\n    var finalData = this.convertObjectToArray(Object.assign(oldObj, newObj))\n    this.setState({ latestData: finalData })\n  }\n\n  connectSocket = () => {\n    this.connection = new WebSocket('ws://stocks.mnet.website');\n    this.connection.onmessage = evt => {\n      let data = JSON.parse(evt.data);\n      this.processData(data);\n    };\n  }\n  render() {\n    const { number, latestData } = this.state;\n    return (\n      <div className=\"App\">\n        <p>Live Stock Exchange</p>\n        <div>\n            <div className=\"stock-header\">\n              <p className=\"stock-name\">\n                Name\n              </p>\n              <p className=\"stock-price \">\n                Price\n              </p>\n              <p className=\"stock-last-update\">\n                Last updated at\n              </p>\n            </div>\n          <CompWrapper data={latestData} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}